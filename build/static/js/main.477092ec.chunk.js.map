{"version":3,"sources":["pics/tree.gif","util/firebase.js","progress-bar.component.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ProgressBar","props","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","transition","style","margin","padding","color","fontWeight","terms","Main","state","snap","loaded","total","added","displayTimer","displaySuc","numTree","progressTree","onClick","bind","waterRef","database","ref","treeRef","on","snapshot","snaps","val","t","Object","keys","map","item","index","setState","console","log","count","progress","this","current","update","Math","max","min","dishes","dishwasher","hands","shower","flush","washingmachine","className","fontSize","marginLeft","marginTop","border","float","src","treeGIF","alt","marginRight","value","percent","riseAnimation","waveAnimation","waveFrequency","waveAmplitude","gradient","Component","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.477092ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tree.86e681a9.gif\";","import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDFC4kKDoALBRJchkXL3Mb6YPzhjajN_oM\",\r\n    authDomain: \"treehacks-bed0c.firebaseapp.com\",\r\n    databaseURL: \"https://treehacks-bed0c-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"treehacks-bed0c\",\r\n    storageBucket: \"treehacks-bed0c.appspot.com\",\r\n    messagingSenderId: \"500099926048\",\r\n    appId: \"1:500099926048:web:acffd4cbf51ef600b4d445\",\r\n    measurementId: \"G-T1604DBK6S\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n  const { bgcolor, completed } = props;\r\n\r\n  const containerStyles = {\r\n    height: 20,\r\n    width: '100%',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    margin: 50\r\n  }\r\n\r\n  const fillerStyles = {\r\n    height: '100%',\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    borderRadius: 'inherit',\r\n    textAlign: 'right',\r\n    transition: 'width 1s ease-in-out'\r\n  }\r\n\r\n  const labelStyles = {\r\n    padding: 5,\r\n    color: 'white',\r\n    fontWeight: 'bold'\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={fillerStyles}>\r\n        <span style={labelStyles}>{`${completed}%`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;","import React, { Component } from 'react';\r\nimport treeGIF from './pics/tree.gif';\r\nimport firebase from './util/firebase';\r\nimport './main.css';\r\nimport ProgressBar from \"./progress-bar.component\"\r\nimport LiquidFillGauge from 'react-liquid-gauge';\r\n\r\nconst terms={\r\n    'dishes':'Doing dishes (5L/minute)',\r\n    'dishwasher':' Dishwasher (11L/cycle)',\r\n    'flush':'Flushing (13L/usage)',\r\n    'hands':'Washing hands (5L/minute)',\r\n    'shower':'Showering (8L/minute)',\r\n    'washingmachine':'Washing machine (10L/cycle)',\r\n}\r\nclass Main extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snap: null,\r\n            loaded:false,\r\n            total: 0,\r\n            added: 0,\r\n            displayTimer: false,\r\n            displaySuc: false,\r\n            numTree:0,\r\n            progressTree:0\r\n        }\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const waterRef = firebase.database().ref('water');       \r\n        const treeRef = firebase.database().ref('tree');       \r\n\r\n        waterRef.on('value', (snapshot) => {\r\n            const snaps = snapshot.val();\r\n            var t = 0;\r\n            Object.keys(snaps).map((item, index) => {\r\n                if(item ===\"dishes\"){\r\n                    t+= 5* snaps[item];\r\n                }else if(item ===\"dishwasher\"){\r\n                    t+= 11* snaps[item];\r\n                }else if(item ===\"flush\"){\r\n                    t+= 13* snaps[item];\r\n                }else if(item ===\"hands\"){\r\n                    t+= 5* snaps[item];\r\n                }else if(item ===\"shower\"){\r\n                    t+= 8* snaps[item];\r\n                }else if(item ===\"washingmachine\"){\r\n                    t+= 20* snaps[item];\r\n                }\r\n            })\r\n            this.setState({\r\n                snap: snaps,\r\n                total: t\r\n            })\r\n        })\r\n        treeRef.on('value', (snapshot) => {\r\n            const snaps = snapshot.val();\r\n            console.log(snaps);\r\n            this.setState({\r\n                numTree: snaps.count,\r\n                progressTree: snaps.progress,\r\n                loaded:true\r\n            })\r\n        })\r\n    }\r\n\r\n    onClick(){\r\n        this.setState({\r\n            added: this.state.total\r\n        })\r\n        \r\n        if(this.state.total !== 0){\r\n        const waterRef = firebase.database().ref('water');\r\n        const treeRef = firebase.database().ref('tree');   \r\n\r\n        var current = this.state.progressTree + 100 - (this.state.total/200)*100;\r\n        \r\n        if (current >= 100){\r\n            current = current-100;\r\n            treeRef.update({count: this.state.numTree+1});\r\n        }\r\n        \r\n        this.setState({\r\n            displaySuc:true,\r\n            displayTimer:false,\r\n            progressTree:current\r\n        })\r\n        \r\n        treeRef.update({progress: Math.max( 0, Math.min(current, 100) )})\r\n        waterRef.update({dishes:0, dishwasher:0, hands:0, shower:0, flush:0, washingmachine:0});\r\n\r\n    }else{\r\n            this.setState({\r\n                displayTimer:true,\r\n                displaySuc:false\r\n            })\r\n        }\r\n    }   \r\n\r\n    render(){\r\n        if(!this.state.loaded){\r\n            return(\r\n            <div className=\"Homepage\">\r\n                Loading\r\n            </div>\r\n            )\r\n        }else{\r\n            const snap = this.state.snap\r\n            return(\r\n            <div> \r\n                <div className=\"Homepage\">\r\n                    <h1 style={{fontSize:'60px'}}>WaterWatch</h1>\r\n                        <table style={{width:'20%', marginLeft:'40%'}}>\r\n                            <tr>\r\n                                <th>activity</th>\r\n                                <th>amount</th>\r\n                            </tr>\r\n\r\n                            {Object.keys(snap).map((item, index) => (\r\n                                \r\n                                <tr>\r\n                                    <td key={index}>{terms[item]}</td>\r\n                                    <td key={item}>{snap[item]}</td>\r\n                                </tr>                                \r\n                                \r\n                            ))}\r\n                                <tr>\r\n                                    <td ><b>total litre usage</b></td>\r\n                                    <td> <b>{this.state.total} Litres</b> </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td > daily goal</td>\r\n                                    <td>  150 Litres </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td >Bucket volume</td>\r\n                                    <td> 200 Litres </td>\r\n                                </tr>\r\n                        </table>\r\n                            \r\n                            <p style={{width:'80%', marginLeft:'10%', marginTop:'30px', fontSize:'20px'}}>Hello, and welcome to <b>WaterWatch</b>. In the table above, you can see your water consumption from today. Every day, <b>your tree will need water in order to grow</b>. You can water the tree with the bucket, however, the bucket only contains <b>150L</b> of water. You have to watch your water consumption over the day to make sure there is enough water left to water your tree.</p>\r\n\r\n                        <button onClick={this.onClick}\r\n                         style={{backgroundColor:'#a9d5ef', color:'#0055a6', border:'none', width:'500px'}}>Water the Tree\r\n                         </button>\r\n                         {this.state.displayTimer && <p style={{color:'red', fontSize:'20px'}}>You already have watered your tree for today. Come back tomorrow!</p>} {this.state.displaySuc && <p style={{color:'#49a144', fontSize:'20px'}}>You have watered your tree. Congrats, your tree has grown by {Math.max( 0, Math.min(100 - (this.state.added/200)*100, 100) )} %</p>}\r\n\r\n                        <h3>Current progress on tree:</h3>\r\n                        <div style={{width: \"50%\", marginLeft: \"23%\"}}>\r\n                            <ProgressBar bgcolor={\"#49a144\"} completed={this.state.progressTree}/>\r\n                        </div>\r\n\r\n                        <h3>Number of trees: <b style={{color:'#49a144'}}>{this.state.numTree}</b></h3>\r\n                        </div>  \r\n\r\n                        <img style={{float:'left'}} src={treeGIF} alt=\"Tree\"/>\r\n                         <h3 style={{marginLeft:'65%'}}>Bucket state:</h3>\r\n                        <div style={{float:'right', marginRight:'14%', marginTop:'40px'}}>\r\n                            {/* <ProgressBar bgcolor={\"#0055a6\"} completed={100 - this.state.total}/> */}\r\n                            <LiquidFillGauge \r\n                                value={Math.max( 0, Math.min(100 - (this.state.total/200)*100, 100) )}\r\n                                percent=\"%\"\r\n                                riseAnimation\r\n                                waveAnimation\r\n                                waveFrequency={2}\r\n                                waveAmplitude={1}\r\n                                gradient\r\n                            />\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                \r\n\r\n                <section>\r\n                    <div className=\"wave wave1\"></div>\r\n                    <div className=\"wave wave2\"></div>\r\n                    <div className=\"wave wave3\"></div> \r\n                    <div className=\"wave wave4\"></div>\r\n                </section>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from './Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n \r\n  return (\r\n    \r\n      <React.Fragment>\r\n          <div>\r\n            <Main />\r\n          </div>\r\n      </React.Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}