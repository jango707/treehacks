{"version":3,"sources":["pics/tree.gif","util/firebase.js","progress-bar.component.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ProgressBar","props","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","transition","style","margin","padding","color","fontWeight","Main","state","snap","loaded","total","displayTimer","numTree","progressTree","onClick","bind","waterRef","database","ref","treeRef","on","snapshot","snaps","val","t","Object","keys","map","item","index","setState","console","log","count","progress","update","dishes","dishwasher","hands","shower","washingmachine","this","className","marginLeft","border","value","percent","riseAnimation","waveAnimation","waveFrequency","waveAmplitude","gradient","fontSize","src","treeGIF","alt","Component","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d470ab7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tree.86e681a9.gif\";","import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDFC4kKDoALBRJchkXL3Mb6YPzhjajN_oM\",\r\n    authDomain: \"treehacks-bed0c.firebaseapp.com\",\r\n    databaseURL: \"https://treehacks-bed0c-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"treehacks-bed0c\",\r\n    storageBucket: \"treehacks-bed0c.appspot.com\",\r\n    messagingSenderId: \"500099926048\",\r\n    appId: \"1:500099926048:web:acffd4cbf51ef600b4d445\",\r\n    measurementId: \"G-T1604DBK6S\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n  const { bgcolor, completed } = props;\r\n\r\n  const containerStyles = {\r\n    height: 20,\r\n    width: '100%',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    margin: 50\r\n  }\r\n\r\n  const fillerStyles = {\r\n    height: '100%',\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    borderRadius: 'inherit',\r\n    textAlign: 'right',\r\n    transition: 'width 1s ease-in-out'\r\n  }\r\n\r\n  const labelStyles = {\r\n    padding: 5,\r\n    color: 'white',\r\n    fontWeight: 'bold'\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={fillerStyles}>\r\n        <span style={labelStyles}>{`${completed}%`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;","import React, { Component } from 'react';\r\nimport treeGIF from './pics/tree.gif';\r\nimport firebase from './util/firebase';\r\nimport './main.css';\r\nimport ProgressBar from \"./progress-bar.component\"\r\nimport LiquidFillGauge from 'react-liquid-gauge';\r\n\r\n\r\nclass Main extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snap: null,\r\n            loaded:false,\r\n            total: 0,\r\n            displayTimer: false,\r\n            numTree:0,\r\n            progressTree:0\r\n        }\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const waterRef = firebase.database().ref('water');       \r\n        const treeRef = firebase.database().ref('tree');       \r\n\r\n        waterRef.on('value', (snapshot) => {\r\n            const snaps = snapshot.val();\r\n            var t = 0;\r\n            Object.keys(snaps).map((item, index) => {\r\n                t+= snaps[item];\r\n            })\r\n            this.setState({\r\n                snap: snaps,\r\n                total: t\r\n            })\r\n        })\r\n        treeRef.on('value', (snapshot) => {\r\n            const snaps = snapshot.val();\r\n            console.log(snaps);\r\n            this.setState({\r\n                numTree: snaps.count,\r\n                progressTree: snaps.progress,\r\n                loaded:true\r\n            })\r\n        })\r\n    }\r\n\r\n    onClick(){\r\n        const waterRef = firebase.database().ref('water');\r\n        \r\n        waterRef.update({dishes:0, dishwasher:0, hands:0, shower:0, washingmachine:0});\r\n\r\n        if(this.state.total === 0){\r\n            this.setState({\r\n                displayTimer:true\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(!this.state.loaded){\r\n            return(\r\n            <div className=\"Homepage\">\r\n                Loading\r\n            </div>\r\n            )\r\n        }else{\r\n            const snap = this.state.snap\r\n            return(\r\n            <div> \r\n                <div className=\"Homepage\">\r\n                    <h1>TreeHacks</h1>\r\n                        <table style={{width:'20%', marginLeft:'42%'}}>\r\n                            <tr>\r\n                                <th>activity</th>\r\n                                <th>amount</th>\r\n                            </tr>\r\n\r\n                            {Object.keys(snap).map((item, index) => (\r\n                                \r\n                                <tr>\r\n                                    <td key={index}>{item}</td>\r\n                                    <td key={item}>{snap[item]}</td>\r\n                                </tr>                                \r\n                                \r\n                            ))}\r\n                                <tr>\r\n                                    <td ><b>total</b></td>\r\n                                    <td> <b>{this.state.total} Litres</b> </td>\r\n                                </tr>\r\n                        </table>\r\n\r\n\r\n                        <button onClick={this.onClick}\r\n                         style={{backgroundColor:'#a9d5ef', color:'#0055a6', border:'none', width:'500px'}}>Water the Tree\r\n                         </button>\r\n\r\n                         <h3>Bucket state:</h3>\r\n                        <div style={{width: \"50%\", marginLeft: \"25%\"}}>\r\n                            {/* <ProgressBar bgcolor={\"#0055a6\"} completed={100 - this.state.total}/> */}\r\n                            <LiquidFillGauge \r\n                                style={{ margin: '0 auto' }}\r\n                                value={100 - this.state.total}\r\n                                percent=\"%\"\r\n                                riseAnimation\r\n                                waveAnimation\r\n                                waveFrequency={2}\r\n                                waveAmplitude={1}\r\n                                gradient\r\n                            />\r\n                        </div>\r\n\r\n                        <h3>Current progress on tree:</h3>\r\n                        <div style={{width: \"50%\", marginLeft: \"23%\"}}>\r\n                            <ProgressBar bgcolor={\"#49a144\"} completed={this.state.progressTree}/>\r\n                        </div>\r\n\r\n                        <h3>Number of trees: <b style={{color:'#49a144'}}>{this.state.numTree}</b></h3>\r\n\r\n\r\n                         {this.state.displayTimer && <p style={{color:'red', fontSize:'20px'}}>Bucket will be full again tomorrow night</p>}\r\n\r\n                <img src={treeGIF} alt=\"Tree\"/>\r\n                </div>  \r\n                \r\n\r\n                <section>\r\n                    <div className=\"wave wave1\"></div>\r\n                    <div className=\"wave wave2\"></div>\r\n                    <div className=\"wave wave3\"></div> \r\n                    <div className=\"wave wave4\"></div>\r\n                </section>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from './Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n \r\n  return (\r\n    \r\n      <React.Fragment>\r\n          <div>\r\n            <Main />\r\n          </div>\r\n      </React.Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}